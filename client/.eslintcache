[{"C:\\Users\\brian\\bootcamp\\homework\\book-search-engine\\client\\src\\index.js":"1","C:\\Users\\brian\\bootcamp\\homework\\book-search-engine\\client\\src\\App.js":"2","C:\\Users\\brian\\bootcamp\\homework\\book-search-engine\\client\\src\\reportWebVitals.js":"3","C:\\Users\\brian\\bootcamp\\homework\\book-search-engine\\client\\src\\pages\\SavedBooks.js":"4","C:\\Users\\brian\\bootcamp\\homework\\book-search-engine\\client\\src\\pages\\SearchBooks.js":"5","C:\\Users\\brian\\bootcamp\\homework\\book-search-engine\\client\\src\\components\\Navbar.js":"6","C:\\Users\\brian\\bootcamp\\homework\\book-search-engine\\client\\src\\components\\LoginForm.js":"7","C:\\Users\\brian\\bootcamp\\homework\\book-search-engine\\client\\src\\components\\SignupForm.js":"8","C:\\Users\\brian\\bootcamp\\homework\\book-search-engine\\client\\src\\utils\\queries.js":"9","C:\\Users\\brian\\bootcamp\\homework\\book-search-engine\\client\\src\\utils\\auth.js":"10","C:\\Users\\brian\\bootcamp\\homework\\book-search-engine\\client\\src\\utils\\localStorage.js":"11","C:\\Users\\brian\\bootcamp\\homework\\book-search-engine\\client\\src\\utils\\mutations.js":"12","C:\\Users\\brian\\bootcamp\\homework\\book-search-engine\\client\\src\\utils\\API.js":"13"},{"size":567,"mtime":1646689469274,"results":"14","hashOfConfig":"15"},{"size":1756,"mtime":1646693007867,"results":"16","hashOfConfig":"15"},{"size":375,"mtime":1645661681231,"results":"17","hashOfConfig":"15"},{"size":2546,"mtime":1646689918898,"results":"18","hashOfConfig":"15"},{"size":5156,"mtime":1646722374140,"results":"19","hashOfConfig":"15"},{"size":2601,"mtime":1645661681560,"results":"20","hashOfConfig":"15"},{"size":2730,"mtime":1646663119993,"results":"21","hashOfConfig":"15"},{"size":3468,"mtime":1646698416548,"results":"22","hashOfConfig":"15"},{"size":323,"mtime":1646720098566,"results":"23","hashOfConfig":"15"},{"size":1283,"mtime":1646690693344,"results":"24","hashOfConfig":"15"},{"size":823,"mtime":1645661681571,"results":"25","hashOfConfig":"15"},{"size":1151,"mtime":1646721658154,"results":"26","hashOfConfig":"15"},{"size":1590,"mtime":1646689788292,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1kr1sgg",{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"C:\\Users\\brian\\bootcamp\\homework\\book-search-engine\\client\\src\\index.js",[],["58","59"],"C:\\Users\\brian\\bootcamp\\homework\\book-search-engine\\client\\src\\App.js",[],"C:\\Users\\brian\\bootcamp\\homework\\book-search-engine\\client\\src\\reportWebVitals.js",[],"C:\\Users\\brian\\bootcamp\\homework\\book-search-engine\\client\\src\\pages\\SavedBooks.js",["60","61","62"],"import React, { useState, useEffect } from 'react';\r\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\r\n\r\nimport Auth from '../utils/auth';\r\nimport { useQuery, useMutation } from '@apollo/client';\r\nimport { QUERY_ME } from '../utils/queries';\r\nimport { DELETE_BOOK } from '../utils/mutations';\r\nimport { removeBookId } from '../utils/localStorage';\r\n\r\nconst SavedBooks = () => {\r\n  const { loading, data } = useQuery(QUERY_ME);\r\n\r\n  const user = data?.me || [];\r\n  console.log(\"user\", user)\r\n\r\n  const [deleteBook, { error }] = useMutation(DELETE_BOOK);\r\n\r\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\r\n  const handleDeleteBook = async (bookId) => {\r\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\r\n\r\n    if (!token) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      const response = await deleteBook({\r\n        variables: { bookId: bookId },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('something went wrong!');\r\n      }\r\n\r\n      // upon success, remove book's id from localStorage\r\n      removeBookId(bookId);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  // if data isn't here yet, say so\r\n  if (loading) {\r\n    return <h2>LOADING...</h2>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Jumbotron fluid className='text-light bg-dark'>\r\n        <Container>\r\n          <h1>Viewing saved books!</h1>\r\n        </Container>\r\n      </Jumbotron>\r\n      <Container>\r\n        <h2>\r\n          {user.savedBooks.length\r\n            ? `Viewing ${user.savedBooks.length} saved ${user.savedBooks.length === 1 ? 'book' : 'books'}:`\r\n            : 'You have no saved books!'}\r\n        </h2>\r\n        <CardColumns>\r\n          {user.savedBooks.map((book) => {\r\n            return (\r\n              <Card key={book.bookId} border='dark'>\r\n                {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\r\n                <Card.Body>\r\n                  <Card.Title>{book.title}</Card.Title>\r\n                  <p className='small'>Authors: {book.authors}</p>\r\n                  <Card.Text>{book.description}</Card.Text>\r\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\r\n                    Delete this Book!\r\n                  </Button>\r\n                </Card.Body>\r\n              </Card>\r\n            );\r\n          })}\r\n        </CardColumns>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SavedBooks;\r\n","C:\\Users\\brian\\bootcamp\\homework\\book-search-engine\\client\\src\\pages\\SearchBooks.js",["63"],"C:\\Users\\brian\\bootcamp\\homework\\book-search-engine\\client\\src\\components\\Navbar.js",[],"C:\\Users\\brian\\bootcamp\\homework\\book-search-engine\\client\\src\\components\\LoginForm.js",["64","65"],"// see SignupForm.js for comments\r\nimport React, { useState } from 'react';\r\nimport { Form, Button, Alert } from 'react-bootstrap';\r\nimport { useMutation } from '@apollo/client';\r\n\r\nimport { LOGIN_USER } from '../utils/mutations';\r\nimport Auth from '../utils/auth';\r\n\r\nconst LoginForm = () => {\r\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\r\n  const [validated] = useState(false);\r\n  const [showAlert, setShowAlert] = useState(false);\r\n\r\n  const [login, { error, data }] = useMutation(LOGIN_USER);\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserFormData({ ...userFormData, [name]: value });\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    // check if form has everything (as per react-bootstrap docs)\r\n    const form = event.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n\r\n    try {\r\n      const { data } = await login({\r\n        variables: { ...userFormData },\r\n      });\r\n      console.log(\"data\", data)\r\n      Auth.login(data.login.token);\r\n    } catch (e) {\r\n      console.error(e);\r\n      setShowAlert(true);\r\n    }\r\n\r\n    setUserFormData({\r\n      username: '',\r\n      email: '',\r\n      password: '',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\r\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\r\n          Something went wrong with your login credentials!\r\n        </Alert>\r\n        <Form.Group>\r\n          <Form.Label htmlFor='email'>Email</Form.Label>\r\n          <Form.Control\r\n            type='text'\r\n            placeholder='Your email'\r\n            name='email'\r\n            onChange={handleInputChange}\r\n            value={userFormData.email}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor='password'>Password</Form.Label>\r\n          <Form.Control\r\n            type='password'\r\n            placeholder='Your password'\r\n            name='password'\r\n            onChange={handleInputChange}\r\n            value={userFormData.password}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Button\r\n          disabled={!(userFormData.email && userFormData.password)}\r\n          type='submit'\r\n          variant='success'>\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n","C:\\Users\\brian\\bootcamp\\homework\\book-search-engine\\client\\src\\components\\SignupForm.js",["66"],"import React, { useState } from 'react';\r\nimport { Form, Button, Alert } from 'react-bootstrap';\r\nimport { useMutation } from '@apollo/client';\r\n\r\nimport { ADD_USER } from '../utils/mutations';\r\n// import { createUser } from '../utils/API';\r\nimport Auth from '../utils/auth';\r\n\r\nconst SignupForm = () => {\r\n  // set initial form state\r\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\r\n  // set state for form validation\r\n  const [validated] = useState(false);\r\n  // set state for alert\r\n  const [showAlert, setShowAlert] = useState(false);\r\n\r\n  const [addUser, { error }] = useMutation(ADD_USER);\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserFormData({ ...userFormData, [name]: value });\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    console.log(\"click\")\r\n    event.preventDefault();\r\n\r\n    // check if form has everything (as per react-bootstrap docs)\r\n    const form = event.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n\r\n    try {\r\n      const { data } = await addUser({\r\n        variables: { ...userFormData },\r\n      });\r\n      console.log(\"data\", data)\r\n\r\n      Auth.login(data.addUser.token);\r\n    } catch (e) {\r\n      console.error(e);\r\n      setShowAlert(true);\r\n    }\r\n\r\n    setUserFormData({\r\n      username: '',\r\n      email: '',\r\n      password: '',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* This is needed for the validation functionality above */}\r\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\r\n        {/* show alert if server response is bad */}\r\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\r\n          Something went wrong with your signup!\r\n        </Alert>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor='username'>Username</Form.Label>\r\n          <Form.Control\r\n            type='text'\r\n            placeholder='Your username'\r\n            name='username'\r\n            onChange={handleInputChange}\r\n            value={userFormData.username}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor='email'>Email</Form.Label>\r\n          <Form.Control\r\n            type='email'\r\n            placeholder='Your email address'\r\n            name='email'\r\n            onChange={handleInputChange}\r\n            value={userFormData.email}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor='password'>Password</Form.Label>\r\n          <Form.Control\r\n            type='password'\r\n            placeholder='Your password'\r\n            name='password'\r\n            onChange={handleInputChange}\r\n            value={userFormData.password}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Button\r\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\r\n          type='submit'\r\n          variant='success'>\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SignupForm;\r\n","C:\\Users\\brian\\bootcamp\\homework\\book-search-engine\\client\\src\\utils\\queries.js",[],"C:\\Users\\brian\\bootcamp\\homework\\book-search-engine\\client\\src\\utils\\auth.js",[],"C:\\Users\\brian\\bootcamp\\homework\\book-search-engine\\client\\src\\utils\\localStorage.js",[],"C:\\Users\\brian\\bootcamp\\homework\\book-search-engine\\client\\src\\utils\\mutations.js",[],"C:\\Users\\brian\\bootcamp\\homework\\book-search-engine\\client\\src\\utils\\API.js",[],{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":1,"column":17,"nodeType":"73","messageId":"74","endLine":1,"endColumn":25},{"ruleId":"71","severity":1,"message":"75","line":1,"column":27,"nodeType":"73","messageId":"74","endLine":1,"endColumn":36},{"ruleId":"71","severity":1,"message":"76","line":16,"column":24,"nodeType":"73","messageId":"74","endLine":16,"endColumn":29},{"ruleId":"71","severity":1,"message":"76","line":25,"column":22,"nodeType":"73","messageId":"74","endLine":25,"endColumn":27},{"ruleId":"71","severity":1,"message":"76","line":14,"column":19,"nodeType":"73","messageId":"74","endLine":14,"endColumn":24},{"ruleId":"71","severity":1,"message":"77","line":14,"column":26,"nodeType":"73","messageId":"74","endLine":14,"endColumn":30},{"ruleId":"71","severity":1,"message":"76","line":17,"column":21,"nodeType":"73","messageId":"74","endLine":17,"endColumn":26},"no-native-reassign",["78"],"no-negated-in-lhs",["79"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'error' is assigned a value but never used.","'data' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]